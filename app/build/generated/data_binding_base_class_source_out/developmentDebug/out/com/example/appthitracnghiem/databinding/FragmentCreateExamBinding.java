// Generated by view binder compiler. Do not edit!
package com.example.appthitracnghiem.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.appthitracnghiem.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentCreateExamBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ImageView addCoverImageCreateTest;

  @NonNull
  public final EditText answerCreate1;

  @NonNull
  public final EditText answerCreate2;

  @NonNull
  public final EditText answerCreate3;

  @NonNull
  public final EditText answerCreate4;

  @NonNull
  public final ImageView backCreateTest;

  @NonNull
  public final CardView backQuestionCreate;

  @NonNull
  public final CardView completeCreateTest;

  @NonNull
  public final LinearLayout createLevel;

  @NonNull
  public final ImageView imageCoverCreateTest;

  @NonNull
  public final CheckBox isAnswer1;

  @NonNull
  public final CheckBox isAnswer2;

  @NonNull
  public final CheckBox isAnswer3;

  @NonNull
  public final CheckBox isAnswer4;

  @NonNull
  public final RelativeLayout layoutOnClickCreate;

  @NonNull
  public final ImageView menuCreateTestAct;

  @NonNull
  public final CardView nextQuestionCreate;

  @NonNull
  public final EditText questionCreate;

  @NonNull
  public final RecyclerView recycleListNumber;

  @NonNull
  public final NestedScrollView scrollCreateExam;

  @NonNull
  public final TextView txtAddQuestion;

  @NonNull
  public final TextView txtContinue;

  @NonNull
  public final TextView txtCreateTest;

  @NonNull
  public final TextView txtLevel;

  @NonNull
  public final TextView txtSelectImageCt;

  @NonNull
  public final TextView txtTime;

  private FragmentCreateExamBinding(@NonNull RelativeLayout rootView,
      @NonNull ImageView addCoverImageCreateTest, @NonNull EditText answerCreate1,
      @NonNull EditText answerCreate2, @NonNull EditText answerCreate3,
      @NonNull EditText answerCreate4, @NonNull ImageView backCreateTest,
      @NonNull CardView backQuestionCreate, @NonNull CardView completeCreateTest,
      @NonNull LinearLayout createLevel, @NonNull ImageView imageCoverCreateTest,
      @NonNull CheckBox isAnswer1, @NonNull CheckBox isAnswer2, @NonNull CheckBox isAnswer3,
      @NonNull CheckBox isAnswer4, @NonNull RelativeLayout layoutOnClickCreate,
      @NonNull ImageView menuCreateTestAct, @NonNull CardView nextQuestionCreate,
      @NonNull EditText questionCreate, @NonNull RecyclerView recycleListNumber,
      @NonNull NestedScrollView scrollCreateExam, @NonNull TextView txtAddQuestion,
      @NonNull TextView txtContinue, @NonNull TextView txtCreateTest, @NonNull TextView txtLevel,
      @NonNull TextView txtSelectImageCt, @NonNull TextView txtTime) {
    this.rootView = rootView;
    this.addCoverImageCreateTest = addCoverImageCreateTest;
    this.answerCreate1 = answerCreate1;
    this.answerCreate2 = answerCreate2;
    this.answerCreate3 = answerCreate3;
    this.answerCreate4 = answerCreate4;
    this.backCreateTest = backCreateTest;
    this.backQuestionCreate = backQuestionCreate;
    this.completeCreateTest = completeCreateTest;
    this.createLevel = createLevel;
    this.imageCoverCreateTest = imageCoverCreateTest;
    this.isAnswer1 = isAnswer1;
    this.isAnswer2 = isAnswer2;
    this.isAnswer3 = isAnswer3;
    this.isAnswer4 = isAnswer4;
    this.layoutOnClickCreate = layoutOnClickCreate;
    this.menuCreateTestAct = menuCreateTestAct;
    this.nextQuestionCreate = nextQuestionCreate;
    this.questionCreate = questionCreate;
    this.recycleListNumber = recycleListNumber;
    this.scrollCreateExam = scrollCreateExam;
    this.txtAddQuestion = txtAddQuestion;
    this.txtContinue = txtContinue;
    this.txtCreateTest = txtCreateTest;
    this.txtLevel = txtLevel;
    this.txtSelectImageCt = txtSelectImageCt;
    this.txtTime = txtTime;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentCreateExamBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentCreateExamBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_create_exam, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentCreateExamBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addCoverImageCreateTest;
      ImageView addCoverImageCreateTest = ViewBindings.findChildViewById(rootView, id);
      if (addCoverImageCreateTest == null) {
        break missingId;
      }

      id = R.id.answerCreate1;
      EditText answerCreate1 = ViewBindings.findChildViewById(rootView, id);
      if (answerCreate1 == null) {
        break missingId;
      }

      id = R.id.answerCreate2;
      EditText answerCreate2 = ViewBindings.findChildViewById(rootView, id);
      if (answerCreate2 == null) {
        break missingId;
      }

      id = R.id.answerCreate3;
      EditText answerCreate3 = ViewBindings.findChildViewById(rootView, id);
      if (answerCreate3 == null) {
        break missingId;
      }

      id = R.id.answerCreate4;
      EditText answerCreate4 = ViewBindings.findChildViewById(rootView, id);
      if (answerCreate4 == null) {
        break missingId;
      }

      id = R.id.backCreateTest;
      ImageView backCreateTest = ViewBindings.findChildViewById(rootView, id);
      if (backCreateTest == null) {
        break missingId;
      }

      id = R.id.backQuestionCreate;
      CardView backQuestionCreate = ViewBindings.findChildViewById(rootView, id);
      if (backQuestionCreate == null) {
        break missingId;
      }

      id = R.id.completeCreateTest;
      CardView completeCreateTest = ViewBindings.findChildViewById(rootView, id);
      if (completeCreateTest == null) {
        break missingId;
      }

      id = R.id.createLevel;
      LinearLayout createLevel = ViewBindings.findChildViewById(rootView, id);
      if (createLevel == null) {
        break missingId;
      }

      id = R.id.imageCoverCreateTest;
      ImageView imageCoverCreateTest = ViewBindings.findChildViewById(rootView, id);
      if (imageCoverCreateTest == null) {
        break missingId;
      }

      id = R.id.isAnswer1;
      CheckBox isAnswer1 = ViewBindings.findChildViewById(rootView, id);
      if (isAnswer1 == null) {
        break missingId;
      }

      id = R.id.isAnswer2;
      CheckBox isAnswer2 = ViewBindings.findChildViewById(rootView, id);
      if (isAnswer2 == null) {
        break missingId;
      }

      id = R.id.isAnswer3;
      CheckBox isAnswer3 = ViewBindings.findChildViewById(rootView, id);
      if (isAnswer3 == null) {
        break missingId;
      }

      id = R.id.isAnswer4;
      CheckBox isAnswer4 = ViewBindings.findChildViewById(rootView, id);
      if (isAnswer4 == null) {
        break missingId;
      }

      id = R.id.layoutOnClickCreate;
      RelativeLayout layoutOnClickCreate = ViewBindings.findChildViewById(rootView, id);
      if (layoutOnClickCreate == null) {
        break missingId;
      }

      id = R.id.menuCreateTestAct;
      ImageView menuCreateTestAct = ViewBindings.findChildViewById(rootView, id);
      if (menuCreateTestAct == null) {
        break missingId;
      }

      id = R.id.nextQuestionCreate;
      CardView nextQuestionCreate = ViewBindings.findChildViewById(rootView, id);
      if (nextQuestionCreate == null) {
        break missingId;
      }

      id = R.id.questionCreate;
      EditText questionCreate = ViewBindings.findChildViewById(rootView, id);
      if (questionCreate == null) {
        break missingId;
      }

      id = R.id.recycleListNumber;
      RecyclerView recycleListNumber = ViewBindings.findChildViewById(rootView, id);
      if (recycleListNumber == null) {
        break missingId;
      }

      id = R.id.scrollCreateExam;
      NestedScrollView scrollCreateExam = ViewBindings.findChildViewById(rootView, id);
      if (scrollCreateExam == null) {
        break missingId;
      }

      id = R.id.txtAddQuestion;
      TextView txtAddQuestion = ViewBindings.findChildViewById(rootView, id);
      if (txtAddQuestion == null) {
        break missingId;
      }

      id = R.id.txtContinue;
      TextView txtContinue = ViewBindings.findChildViewById(rootView, id);
      if (txtContinue == null) {
        break missingId;
      }

      id = R.id.txtCreateTest;
      TextView txtCreateTest = ViewBindings.findChildViewById(rootView, id);
      if (txtCreateTest == null) {
        break missingId;
      }

      id = R.id.txtLevel;
      TextView txtLevel = ViewBindings.findChildViewById(rootView, id);
      if (txtLevel == null) {
        break missingId;
      }

      id = R.id.txtSelectImageCt;
      TextView txtSelectImageCt = ViewBindings.findChildViewById(rootView, id);
      if (txtSelectImageCt == null) {
        break missingId;
      }

      id = R.id.txtTime;
      TextView txtTime = ViewBindings.findChildViewById(rootView, id);
      if (txtTime == null) {
        break missingId;
      }

      return new FragmentCreateExamBinding((RelativeLayout) rootView, addCoverImageCreateTest,
          answerCreate1, answerCreate2, answerCreate3, answerCreate4, backCreateTest,
          backQuestionCreate, completeCreateTest, createLevel, imageCoverCreateTest, isAnswer1,
          isAnswer2, isAnswer3, isAnswer4, layoutOnClickCreate, menuCreateTestAct,
          nextQuestionCreate, questionCreate, recycleListNumber, scrollCreateExam, txtAddQuestion,
          txtContinue, txtCreateTest, txtLevel, txtSelectImageCt, txtTime);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
