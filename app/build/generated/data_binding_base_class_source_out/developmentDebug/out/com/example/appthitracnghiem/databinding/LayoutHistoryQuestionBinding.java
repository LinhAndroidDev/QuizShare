// Generated by view binder compiler. Do not edit!
package com.example.appthitracnghiem.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.appthitracnghiem.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutHistoryQuestionBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView deleteQuestionHistory;

  @NonNull
  public final TextView descripQuestionHistory;

  @NonNull
  public final TextView editQuestionHistory;

  @NonNull
  public final ImageView imageQuestionHistory;

  @NonNull
  public final TextView tiltleQuestionHistory;

  private LayoutHistoryQuestionBinding(@NonNull LinearLayout rootView,
      @NonNull TextView deleteQuestionHistory, @NonNull TextView descripQuestionHistory,
      @NonNull TextView editQuestionHistory, @NonNull ImageView imageQuestionHistory,
      @NonNull TextView tiltleQuestionHistory) {
    this.rootView = rootView;
    this.deleteQuestionHistory = deleteQuestionHistory;
    this.descripQuestionHistory = descripQuestionHistory;
    this.editQuestionHistory = editQuestionHistory;
    this.imageQuestionHistory = imageQuestionHistory;
    this.tiltleQuestionHistory = tiltleQuestionHistory;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutHistoryQuestionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutHistoryQuestionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_history_question, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutHistoryQuestionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.deleteQuestionHistory;
      TextView deleteQuestionHistory = ViewBindings.findChildViewById(rootView, id);
      if (deleteQuestionHistory == null) {
        break missingId;
      }

      id = R.id.descripQuestionHistory;
      TextView descripQuestionHistory = ViewBindings.findChildViewById(rootView, id);
      if (descripQuestionHistory == null) {
        break missingId;
      }

      id = R.id.editQuestionHistory;
      TextView editQuestionHistory = ViewBindings.findChildViewById(rootView, id);
      if (editQuestionHistory == null) {
        break missingId;
      }

      id = R.id.imageQuestionHistory;
      ImageView imageQuestionHistory = ViewBindings.findChildViewById(rootView, id);
      if (imageQuestionHistory == null) {
        break missingId;
      }

      id = R.id.tiltleQuestionHistory;
      TextView tiltleQuestionHistory = ViewBindings.findChildViewById(rootView, id);
      if (tiltleQuestionHistory == null) {
        break missingId;
      }

      return new LayoutHistoryQuestionBinding((LinearLayout) rootView, deleteQuestionHistory,
          descripQuestionHistory, editQuestionHistory, imageQuestionHistory, tiltleQuestionHistory);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
